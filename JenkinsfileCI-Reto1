pipeline{
    agent any
    
    stages{
        stage('Get Code'){
            steps {
                git branch: 'develop', url: 'https://github.com/manulis/todo-list-aws'
            }
        }
        stage('Static Test') {
            steps {
                script {
                    sh 'python3 -m flake8 --exit-zero --format=pylint src > flake8.out'
                    recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates: [
                        [threshold: 8, type: 'TOTAL', unstable: true],
                        [threshold: 10, type: 'TOTAL', unstable: false]
                    ]
                    sh 'python3 -m bandit  -r src -o bandit.out -f custom --msg-template "{abspath}:{line}: {severity}: {test_id}: {msg}"'
                    recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates: [
                        [threshold: 2, type: 'TOTAL', unstable: true],
                        [threshold: 4, type: 'TOTAL', unstable: false]
                    ]
                }
            }
        }
        stage('Deploy'){
            steps {
                sh """

                    sam build


                    set +e
                    sam deploy --stack-name todo-list-aws \
                                --region us-east-1 \
                                --s3-bucket "aws-sam-cli-managed-default-samclisourcebucket-j3nhssd0pxbn" \
                                --s3-prefix todo-list-aws \
                                --no-confirm-changeset
                    set -e

                """
            }
        }
        stage('Rest Test'){
            steps{
                sh 'python3 -m pytest --junitxml=result-rest.xml test/integration/todoApiTest.py'
                junit 'result-rest.xml'
            }
        }
        stage('Promote') {
            steps {
                script {
                    def branch = "master"


                    sh 'git config --global user.email "jenkins@gmail.com"'
                    sh 'git config --global user.name "Jenkins CI"'


                    sh "git checkout ${branch}"
                    sh "git pull origin ${branch}"

                    sh "git merge --no-ff ${env.GIT_BRANCH}"


                    sh "git push origin ${branch}"
                }
            }
        }

        stage('Clean'){
            steps {
                cleanWs()
            }
        }
    }
}